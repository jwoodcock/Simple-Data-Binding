{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh16520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Data Binding\
\
Data binding is simply the act of establishing a relationship between an html element and a data model.\
\
There are 3 critical things you need for a successful data binding implementation. \
\
1. A store for objects, their event, and a method to perform. \
2. A event binding handler\
3. A way to add new objects to the binder. \
\
Of course each one of these has some subtasks, but in a nutshell, this is the binding structure. \
\
How do these relate? Let\'92s start at the bottom and work up in a simple graphic. \
\
First, you need a mechanism for defining what html elements are tracked. This can happen in a setup script but most often happens in a simple model object. Here we\'92ll just use a setup script, lightening talk you know. \
\
\'97 add box\
\
Next, you need an to handle the binding of event to html object. So we\'92ll add in a handler for that. \
\
\'97 add box\
\
Finally, you need your binding data store. The event handler will pass on the event request which will make sure the right event was triggered. The data store itself will make sure there is a valid callback to execute.\
\
\'97 add box\
\
So looking at this, you can probably tell the majority of the complexity is in the data store. To see it all, let\'92s look at some code following the same steps. \
\
Our setup script is pretty simple. We\'92ll use it to bind our html elements to binding data store and event handler. We\'92ll also add some basic model functionality. Just enough to to how the binding works. \
\
function setup() \{\
\
    var binder = new dataBinder(); // Our binder object\
    var title, description, flag; // store for new values\
    var old_title, old_description, old_flag; // store old values\
\
    // add binding to html elements\
    binder.on('title:change', function(evt, attr_name, new_val, initiator) \{\
        old_title = title;\
        title = new_val;\
        updateOutput();\
    \});\
\
    binder.on('description:change', function(evt, attr_name, new_val, initiator) \{\
        old_description = description;\
        description = new_val;\
        updateOutput();\
    \});\
\
    binder.on('flag:change', function(evt, attr_name, new_val, initiator) \{\
        old_flag = flag;\
        flag = 'false';\
        if (document.getElementById(attr_name).checked) \{\
            flag = 'true';\
        \}\
        updateOutput();\
    \});\
\
    // method that handles updating the model display\
    var updateOutput = function() \{\
        var output = '<b>Title</b><br />'\
        + '&nbsp;&nbsp;OLD: ' + old_title + '<br />'\
        + '&nbsp;&nbsp;NEW: ' + title + '<br />'\
        + '<b>Flag</b><br />'\
        + '&nbsp;&nbsp;OLD: ' + old_flag + '<br />'\
        + '&nbsp;&nbsp;NEW: ' + flag + '<br />'\
        + '<b>Descripton</b><br />'\
        + '&nbsp;&nbsp;OLD: ' + old_description + '<br />'\
        + '&nbsp;&nbsp;NEW: ' + description;\
        document.getElementById('model_output').innerHTML = output;\
    \};\
\
    document.getElementById('title').focus();\
\}\
\
setup();\
\
Our data store needs an intake, a validate and an execute. \
\
/**\
 * This class controls our bindings between the dom and user model\
 * and has our listener for changes between the two\
 *\
 * @param \{String\} objectId Id of the object to bind to\
 */\
// explain how this class is different that our prior classes\
function dataBinder() \{\
\
    // Create the actual publish and subscription object\
    var pubSub = \{\
        // define an array to hold all the callbacks\
        callbacks: \{\},\
\
        // setup the subscriber method\
        on: function( target, callbackFunction ) \{\
            // check to see if the target already has a callback\
            // if not, create one and set it as an object\
            if ( !this.callbacks[ target ] ) \{\
                this.callbacks[ target ] = [];\
            \}\
            this.callbacks[ target ].push( callbackFunction );\
        \},\
\
        // setup the trigger method, calling the actuall subscribed functions\
        trigger: function(target) \{\
            // check to see if the target already has a callback\
            //if not, create one and set it as an object\
            if ( !this.callbacks[ target ] ) \{\
                this.callbacks[ target ] = [];\
            \}\
            // loop through callbacks for the target and fire the functions\
            var len = this.callbacks[ target ].length;\
            for ( var i = 0; i < len; i++) \{\
                this.callbacks[ target ][ i ].apply( this, arguments );\
            \}\
        \}\
    \};\
\
    // define a proxy method to be called on actual change\
    changeHandler = function( evt ) \{\
        var target = evt.target,\
        dataAttr = getAttrFromTarget( evt.target.id );\
\
        data_attr = dataAttr[0];\
        message = dataAttr[1] + ':change';\
\
        if ( dataAttr && dataAttr !== "" ) \{\
            pubSub.trigger( dataAttr[0] + ':change', dataAttr[0], target.value );\
        \}\
    \};\
\
    // get the target data-bind attribute\
    getAttrFromTarget = function( tar ) \{\
        var attributes = document.getElementById( tar ).attributes;\
        for ( var p = 0; p < attributes.length; p++ ) \{\
            // current attribute\
            var curAttr = attributes[ p ].name;\
            // build a substring to do check against\
            if ( typeof curAttr === 'string' ) \{\
                var subStr = curAttr.substring( 0, 9 );\
                var user = curAttr.substring(10);\
                if ( subStr === 'data-bind' ) \{\
                    return [ attributes[ p ].value, user ];\
                \}\
            \}\
        \}\
    \};\
\
    // Listen to change events and proxy to PubSub\
    if ( document.addEventListener ) \{\
        document.addEventListener( "change", changeHandler, false );\
    \}\
\
    return pubSub;\
\}\
\
Also, to simply our scripts, we\'92ll put our binding handler into the actual data store method. \
\
With these two scripts, you now have a simple data-bound html document. \
\
Let\'92s see it in action. \
\
\
\
\
\
 \
\
}